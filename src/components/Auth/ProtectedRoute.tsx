import React, { useEffect } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { useNavigate, useLocation } from 'react-router-dom';
import { LoadingSpinner } from '../UI/LoadingSpinner';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

export function ProtectedRoute({ children }: ProtectedRouteProps) {
  const { isAuthenticated, loading } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    console.log('üîí ProtectedRoute - √âtat:', { 
      isAuthenticated, 
      loading, 
      pathname: location.pathname 
    });

    // Si non authentifi√©, rediriger vers /login
    if (!loading && !isAuthenticated) {
      console.log('‚ùå Non authentifi√© - redirection vers /login');
      navigate('/login', { replace: true, state: { from: location } });
    } else if (!loading && isAuthenticated) {
      console.log('‚úÖ Authentifi√© - acc√®s autoris√© √†:', location.pathname);
    }
  }, [isAuthenticated, loading, navigate, location]);

  // Afficher le loader pendant la v√©rification
  if (loading) {
    console.log('‚è≥ ProtectedRoute - V√©rification en cours...');
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 flex items-center justify-center">
        <div className="text-center">
          <LoadingSpinner size="lg" className="mx-auto mb-4" />
          <p className="text-gray-600 text-lg">V√©rification...</p>
        </div>
      </div>
    );
  }

  // Si non authentifi√©, ne rien afficher (redirection en cours)
  if (!isAuthenticated) {
    console.log('üö´ ProtectedRoute - Acc√®s refus√©, redirection en cours...');
    return null;
  }

  // ‚úÖ Afficher le contenu si authentifi√©
  console.log('‚úÖ ProtectedRoute - Rendu du contenu autoris√©');
  return <>{children}</>;
}
