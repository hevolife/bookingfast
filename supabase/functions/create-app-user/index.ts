import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Cr√©er le client Supabase avec la cl√© service role
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // V√©rifier l'authentification de l'utilisateur qui fait la demande
    const authHeader = req.headers.get('Authorization')
    if (!authHeader) {
      return new Response(
        JSON.stringify({ error: 'Authorization header required' }),
        { status: 401, headers: corsHeaders }
      )
    }

    // V√©rifier que l'utilisateur actuel a les permissions d'admin
    const token = authHeader.replace('Bearer ', '')
    const { data: { user }, error: authError } = await supabaseClient.auth.getUser(token)
    
    if (authError || !user) {
      return new Response(
        JSON.stringify({ error: 'Invalid authentication' }),
        { status: 401, headers: corsHeaders }
      )
    }

    // V√©rifier si l'utilisateur a les permissions d'admin avec gestion d'erreur
    let isAdmin = false;
    try {
      const { data: userData, error: userError } = await supabaseClient
        .from('users')
        .select('is_super_admin')
        .eq('id', user.id)
        .single()

      if (userError) {
        console.error('‚ùå Erreur v√©rification permissions:', userError);
        // En cas d'erreur, v√©rifier si c'est le premier utilisateur
        const { count, error: countError } = await supabaseClient
          .from('users')
          .select('*', { count: 'exact', head: true });
        
        if (!countError && count === 0) {
          console.log('üéØ Premier utilisateur - acc√®s accord√©');
          isAdmin = true;
        } else {
          console.log('‚ùå Utilisateur non autoris√©');
          isAdmin = false;
        }
      } else {
        isAdmin = userData?.is_super_admin === true;
        console.log('‚úÖ V√©rification permissions r√©ussie - Super admin:', isAdmin);
      }
    } catch (permError) {
      console.error('‚ùå Erreur critique permissions:', permError);
      // Fallback: v√©rifier si c'est le premier utilisateur
      try {
        const { count, error: countError } = await supabaseClient
          .from('users')
          .select('*', { count: 'exact', head: true });
        
        if (!countError && count === 0) {
          console.log('üéØ Premier utilisateur (fallback) - acc√®s accord√©');
          isAdmin = true;
        } else {
          isAdmin = false;
        }
      } catch (fallbackError) {
        console.error('‚ùå Erreur fallback:', fallbackError);
        isAdmin = false;
      }
    }

    if (!isAdmin) {
      console.log('‚ùå Acc√®s refus√© - utilisateur non admin:', user.email);
      return new Response(
        JSON.stringify({ error: 'Insufficient permissions' }),
        { status: 403, headers: corsHeaders }
      )
    }

    // Lire les donn√©es de la requ√™te
    let requestData;
    try {
      requestData = await req.json();
    } catch (jsonError) {
      console.error('‚ùå Erreur parsing JSON:', jsonError);
      return new Response(
        JSON.stringify({ error: 'Invalid JSON in request body' }),
        { status: 400, headers: corsHeaders }
      );
    }

    const { email, password, full_name, role_ids } = requestData;

    if (!email || !password) {
      console.error('‚ùå Donn√©es manquantes - email:', !!email, 'password:', !!password);
      return new Response(
        JSON.stringify({ error: 'Email and password are required' }),
        { status: 400, headers: corsHeaders }
      )
    }

    // Validation email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return new Response(
        JSON.stringify({ error: 'Invalid email format' }),
        { status: 400, headers: corsHeaders }
      );
    }

    // Validation mot de passe
    if (password.length < 6) {
      return new Response(
        JSON.stringify({ error: 'Password must be at least 6 characters long' }),
        { status: 400, headers: corsHeaders }
      );
    }

    console.log('üîÑ Cr√©ation utilisateur:', email)

    // Cr√©er l'utilisateur dans auth.users avec les privil√®ges admin
    const { data: authData, error: authError2 } = await supabaseClient.auth.admin.createUser({
      email: email,
      password: password,
      email_confirm: true,
      user_metadata: {
        full_name: full_name || null
      }
    })

    if (authError2) {
      console.error('‚ùå Erreur cr√©ation auth user:', authError2)
      return new Response(
        JSON.stringify({ 
          error: authError2.message,
          details: 'Failed to create authentication user'
        }),
        { status: 400, headers: corsHeaders }
      )
    }

    if (!authData.user) {
      console.error('‚ùå Aucun utilisateur retourn√© par auth.admin.createUser');
      return new Response(
        JSON.stringify({ error: 'Failed to create user - no user data returned' }),
        { status: 500, headers: corsHeaders }
      );
    }

    console.log('‚úÖ Utilisateur auth cr√©√©:', authData.user.id)

    // R√©cup√©rer les informations d'abonnement du cr√©ateur (compte principal)
    console.log('üîç R√©cup√©ration statut abonnement du propri√©taire...')
    const { data: creatorData, error: creatorError } = await supabaseClient
      .from('users')
      .select('subscription_status, trial_ends_at')
      .eq('id', user.id)
      .single()

    let inheritedSubscriptionStatus = 'trial'
    let inheritedTrialEndsAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()

    if (!creatorError && creatorData) {
      console.log('üìä Donn√©es du cr√©ateur r√©cup√©r√©es:', creatorData)
      
      // H√©riter EXACTEMENT du m√™me statut que le propri√©taire
      inheritedSubscriptionStatus = creatorData.subscription_status || 'trial'
      inheritedTrialEndsAt = creatorData.trial_ends_at
      
      console.log('‚úÖ H√©ritage EXACT du statut propri√©taire:', {
        status: inheritedSubscriptionStatus,
        trial_ends_at: inheritedTrialEndsAt
      })
    } else {
      console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer les donn√©es du cr√©ateur, utilisation des valeurs par d√©faut')
    }
    // Cr√©er l'entr√©e dans la table users
    const { data: userData2, error: userError2 } = await supabaseClient
      .from('users')
      .insert([{
        id: authData.user.id,
        email: email,
        full_name: full_name || null,
        is_super_admin: false,
        subscription_status: inheritedSubscriptionStatus,
        trial_started_at: new Date().toISOString(),
        trial_ends_at: inheritedTrialEndsAt
      }])
      .select()
      .single()

    if (userError2) {
      console.error('‚ùå Erreur cr√©ation user profile:', userError2)
      // Nettoyer l'utilisateur auth si la cr√©ation du profil √©choue
      try {
        await supabaseClient.auth.admin.deleteUser(authData.user.id);
        console.log('üßπ Utilisateur auth nettoy√© apr√®s √©chec profil');
      } catch (cleanupError) {
        console.error('‚ùå Erreur nettoyage utilisateur auth:', cleanupError);
      }
      return new Response(
        JSON.stringify({ 
          error: userError2.message,
          details: 'Failed to create user profile'
        }),
        { status: 400, headers: corsHeaders }
      )
    }

    console.log('‚úÖ Profil utilisateur cr√©√©')

    // Assigner les r√¥les si fournis
    if (role_ids && Array.isArray(role_ids) && role_ids.length > 0) {
      console.log('üîÑ Assignation des r√¥les:', role_ids);
      const roleAssignments = role_ids.map(roleId => ({
        user_id: authData.user.id,
        role_id: roleId,
        granted_by: user.id
      }))

      const { error: rolesError } = await supabaseClient
        .from('user_roles')
        .insert(roleAssignments)

      if (rolesError) {
        console.error('‚ùå Erreur assignation r√¥les:', rolesError)
        // Ne pas √©chouer compl√®tement pour les r√¥les, mais logger
        console.log('‚ö†Ô∏è Utilisateur cr√©√© mais r√¥les non assign√©s');
      } else {
        console.log('‚úÖ R√¥les assign√©s:', role_ids.length);
      }
    } else {
      console.log('‚ÑπÔ∏è Aucun r√¥le √† assigner');
    }
    console.log('üéâ Utilisateur cr√©√© avec succ√®s:')
    console.log('  - Email:', email)
    console.log('  - Statut abonnement h√©rit√©:', inheritedSubscriptionStatus)
    console.log('  - Fin essai h√©rit√©e:', inheritedTrialEndsAt || 'Aucune (abonnement actif)')
    console.log('  - R√¥les assign√©s:', role_ids?.length || 0)

    return new Response(
      JSON.stringify({ 
        success: true, 
        user: {
          id: authData.user.id,
          email: email,
          full_name: full_name,
          subscription_status: inheritedSubscriptionStatus,
          trial_ends_at: inheritedTrialEndsAt,
          created: true
        }
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation utilisateur:', error)
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: 'Unexpected error during user creation',
        timestamp: new Date().toISOString()
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})
