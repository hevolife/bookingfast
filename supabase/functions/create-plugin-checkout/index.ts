import { createClient } from 'npm:@supabase/supabase-js@2'
import Stripe from 'npm:stripe@17.4.0'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
}

Deno.serve(async (req) => {
  // CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    console.log('üéØ === D√âBUT EDGE FUNCTION ===')
    console.log('üìã Method:', req.method)

    // ‚ö†Ô∏è CL√âS HARDCOD√âES - √Ä REMPLACER PAR VOS VRAIES CL√âS STRIPE
    // TODO: D√©placer vers les secrets Supabase en production !
    const HARDCODED_STRIPE_SECRET_KEY = 'STRIPE_SECRET_KEY=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'
    
    // Configuration Supabase
    const supabaseUrl = Deno.env.get('SUPABASE_URL')
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')

    console.log('üîë SUPABASE_URL:', supabaseUrl ? '‚úÖ D√©fini' : '‚ùå MANQUANT')
    console.log('üîë SUPABASE_SERVICE_ROLE_KEY:', supabaseKey ? '‚úÖ D√©fini' : '‚ùå MANQUANT')
    console.log('üîë STRIPE_SECRET_KEY: ‚úÖ HARDCOD√âE')

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Configuration Supabase manquante')
    }

    const supabaseClient = createClient(supabaseUrl, supabaseKey)

    // Initialiser Stripe avec la cl√© hardcod√©e
    const stripe = new Stripe(HARDCODED_STRIPE_SECRET_KEY, {
      apiVersion: '2024-12-18.acacia',
    })

    console.log('‚úÖ Stripe initialis√© avec cl√© hardcod√©e')

    // Parser le body
    let body
    try {
      const text = await req.text()
      console.log('üì¶ Body brut:', text)
      body = JSON.parse(text)
      console.log('üì¶ Body pars√©:', body)
    } catch (e) {
      console.error('‚ùå Erreur parsing body:', e)
      throw new Error('Body JSON invalide')
    }

    const { userId, pluginId } = body

    if (!userId || !pluginId) {
      console.error('‚ùå Donn√©es manquantes - userId:', userId, 'pluginId:', pluginId)
      throw new Error('userId et pluginId requis')
    }

    console.log('üë§ User ID:', userId)
    console.log('üîå Plugin ID:', pluginId)

    // R√©cup√©rer le plugin
    console.log('üîç Recherche plugin...')
    const { data: plugin, error: pluginError } = await supabaseClient
      .from('plugins')
      .select('*')
      .eq('id', pluginId)
      .single()

    if (pluginError) {
      console.error('‚ùå Erreur r√©cup√©ration plugin:', pluginError)
      throw new Error(`Plugin non trouv√©: ${pluginError.message}`)
    }

    if (!plugin) {
      throw new Error('Plugin non trouv√©')
    }

    console.log('‚úÖ Plugin trouv√©:', plugin.name)
    console.log('üí∞ Price ID:', plugin.stripe_price_id)

    if (!plugin.stripe_price_id) {
      throw new Error(`Aucun stripe_price_id configur√© pour le plugin "${plugin.name}". Cr√©ez un Price dans Stripe Dashboard et mettez √† jour la table plugins.`)
    }

    // R√©cup√©rer l'utilisateur
    console.log('üîç Recherche utilisateur...')
    const { data: user, error: userError } = await supabaseClient
      .from('users')
      .select('email, stripe_customer_id')
      .eq('id', userId)
      .single()

    if (userError) {
      console.error('‚ùå Erreur r√©cup√©ration user:', userError)
      throw new Error(`Utilisateur non trouv√©: ${userError.message}`)
    }

    if (!user) {
      throw new Error('Utilisateur non trouv√©')
    }

    console.log('‚úÖ User trouv√©:', user.email)

    // Cr√©er ou r√©cup√©rer le customer Stripe
    let customerId = user.stripe_customer_id

    if (!customerId) {
      console.log('‚ûï Cr√©ation nouveau customer Stripe...')
      try {
        const customer = await stripe.customers.create({
          email: user.email,
          metadata: {
            supabase_user_id: userId
          }
        })
        customerId = customer.id
        console.log('‚úÖ Customer cr√©√©:', customerId)

        // Sauvegarder le customer ID
        const { error: updateError } = await supabaseClient
          .from('users')
          .update({ stripe_customer_id: customerId })
          .eq('id', userId)

        if (updateError) {
          console.error('‚ö†Ô∏è Erreur sauvegarde customer ID:', updateError)
        }
      } catch (e) {
        console.error('‚ùå Erreur cr√©ation customer Stripe:', e)
        throw new Error(`Erreur Stripe: ${e.message}`)
      }
    } else {
      console.log('‚úÖ Customer existant:', customerId)
    }

    // Cr√©er la session Checkout
    console.log('üí≥ Cr√©ation session Checkout...')
    try {
      const session = await stripe.checkout.sessions.create({
        customer: customerId,
        client_reference_id: `${userId}|${pluginId}`,
        line_items: [
          {
            price: plugin.stripe_price_id,
            quantity: 1,
          },
        ],
        mode: 'subscription',
        success_url: `${req.headers.get('origin') || 'https://bookingfast.hevolife.fr'}/plugins?success=true`,
        cancel_url: `${req.headers.get('origin') || 'https://bookingfast.hevolife.fr'}/plugins?canceled=true`,
        metadata: {
          user_id: userId,
          plugin_id: pluginId,
          payment_type: 'plugin_subscription'
        },
        subscription_data: {
          metadata: {
            user_id: userId,
            plugin_id: pluginId
          }
        }
      })

      console.log('‚úÖ Session cr√©√©e:', session.id)
      console.log('üîó URL:', session.url)

      return new Response(
        JSON.stringify({ 
          url: session.url,
          sessionId: session.id
        }),
        {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 200,
        }
      )
    } catch (e) {
      console.error('‚ùå Erreur cr√©ation session Stripe:', e)
      throw new Error(`Erreur Stripe: ${e.message}`)
    }

  } catch (error) {
    console.error('‚ùå === ERREUR EDGE FUNCTION ===')
    console.error('Message:', error.message)
    console.error('Stack:', error.stack)
    
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: error.stack
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400,
      }
    )
  }
})
