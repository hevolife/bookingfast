import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'DELETE, OPTIONS',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Cr√©er le client Supabase avec la cl√© service role
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // V√©rifier l'authentification de l'utilisateur qui fait la demande
    const authHeader = req.headers.get('Authorization')
    if (!authHeader) {
      return new Response(
        JSON.stringify({ error: 'Authorization header required' }),
        { status: 401, headers: corsHeaders }
      )
    }

    // V√©rifier que l'utilisateur actuel a les permissions d'admin
    const token = authHeader.replace('Bearer ', '')
    const { data: { user }, error: authError } = await supabaseClient.auth.getUser(token)
    
    if (authError || !user) {
      return new Response(
        JSON.stringify({ error: 'Invalid authentication' }),
        { status: 401, headers: corsHeaders }
      )
    }

    // V√©rifier si l'utilisateur a les permissions d'admin
    let isAdmin = false;
    try {
      const { data: userData, error: userError } = await supabaseClient
        .from('users')
        .select('is_super_admin')
        .eq('id', user.id)
        .single()

      if (userError) {
        console.error('‚ùå Erreur v√©rification permissions:', userError);
        // En cas d'erreur, v√©rifier si c'est le premier utilisateur
        const { count, error: countError } = await supabaseClient
          .from('users')
          .select('*', { count: 'exact', head: true });
        
        if (!countError && count === 0) {
          console.log('üéØ Premier utilisateur - acc√®s accord√©');
          isAdmin = true;
        } else {
          console.log('‚ùå Utilisateur non autoris√©');
          isAdmin = false;
        }
      } else {
        isAdmin = userData?.is_super_admin === true;
        console.log('‚úÖ V√©rification permissions r√©ussie - Super admin:', isAdmin);
      }
    } catch (permError) {
      console.error('‚ùå Erreur critique permissions:', permError);
      isAdmin = false;
    }

    if (!isAdmin) {
      console.log('‚ùå Acc√®s refus√© - utilisateur non admin:', user.email);
      return new Response(
        JSON.stringify({ error: 'Insufficient permissions' }),
        { status: 403, headers: corsHeaders }
      )
    }

    // Lire les donn√©es de la requ√™te
    let requestData;
    try {
      requestData = await req.json();
    } catch (jsonError) {
      console.error('‚ùå Erreur parsing JSON:', jsonError);
      return new Response(
        JSON.stringify({ error: 'Invalid JSON in request body' }),
        { status: 400, headers: corsHeaders }
      );
    }

    const { user_id } = requestData;

    if (!user_id) {
      console.error('‚ùå ID utilisateur manquant');
      console.error('üìã Donn√©es re√ßues:', requestData);
      return new Response(
        JSON.stringify({ error: 'User ID is required' }),
        { status: 400, headers: corsHeaders }
      )
    }

    console.log('üóëÔ∏è D√©but suppression utilisateur:', user_id);

    // V√©rifier si l'utilisateur √† supprimer est un super admin
    const { data: userToDelete, error: userCheckError } = await supabaseClient
      .from('users')
      .select('email, is_super_admin')
      .eq('id', user_id)
      .single()

    if (!userCheckError && userToDelete) {
      console.log('üë§ Utilisateur √† supprimer:', userToDelete.email, 'Super admin:', userToDelete.is_super_admin)
      
      // Emp√™cher la suppression d'un super admin par un autre super admin
      if (userToDelete.is_super_admin && user_id !== user.id) {
        console.log('‚ùå Tentative de suppression d\'un super admin par un autre')
        return new Response(
          JSON.stringify({ error: 'Cannot delete another super admin' }),
          { status: 403, headers: corsHeaders }
        )
      }
    }

    // Supprimer les donn√©es li√©es √† l'utilisateur dans l'ordre correct
    console.log('üîÑ Suppression des donn√©es li√©es...')

    // 1. Supprimer les r√©demptions de codes
    const { error: redemptionsError } = await supabaseClient
      .from('code_redemptions')
      .delete()
      .eq('user_id', user_id)

    if (redemptionsError) {
      console.warn('‚ö†Ô∏è Erreur suppression r√©demptions:', redemptionsError)
    } else {
      console.log('‚úÖ R√©demptions de codes supprim√©es')
    }

    // 2. Supprimer les abonnements
    const { error: subscriptionsError } = await supabaseClient
      .from('user_subscriptions')
      .delete()
      .eq('user_id', user_id)

    if (subscriptionsError) {
      console.warn('‚ö†Ô∏è Erreur suppression abonnements:', subscriptionsError)
    } else {
      console.log('‚úÖ Abonnements supprim√©s')
    }

    // 3. Supprimer les donn√©es d'affiliation
    const { error: affiliateError } = await supabaseClient
      .from('affiliates')
      .delete()
      .eq('user_id', user_id)

    if (affiliateError) {
      console.warn('‚ö†Ô∏è Erreur suppression donn√©es affiliation:', affiliateError)
    } else {
      console.log('‚úÖ Donn√©es d\'affiliation supprim√©es')
    }

    // 4. Supprimer les r√©servations
    const { error: bookingsError } = await supabaseClient
      .from('bookings')
      .delete()
      .eq('user_id', user_id)

    if (bookingsError) {
      console.warn('‚ö†Ô∏è Erreur suppression r√©servations:', bookingsError)
    } else {
      console.log('‚úÖ R√©servations supprim√©es')
    }

    // 5. Supprimer les services
    const { error: servicesError } = await supabaseClient
      .from('services')
      .delete()
      .eq('user_id', user_id)

    if (servicesError) {
      console.warn('‚ö†Ô∏è Erreur suppression services:', servicesError)
    } else {
      console.log('‚úÖ Services supprim√©s')
    }

    // 6. Supprimer les clients
    const { error: clientsError } = await supabaseClient
      .from('clients')
      .delete()
      .eq('user_id', user_id)

    if (clientsError) {
      console.warn('‚ö†Ô∏è Erreur suppression clients:', clientsError)
    } else {
      console.log('‚úÖ Clients supprim√©s')
    }

    // 7. Supprimer les param√®tres business
    const { error: settingsError } = await supabaseClient
      .from('business_settings')
      .delete()
      .eq('user_id', user_id)

    if (settingsError) {
      console.warn('‚ö†Ô∏è Erreur suppression param√®tres:', settingsError)
    } else {
      console.log('‚úÖ Param√®tres business supprim√©s')
    }

    // 8. Supprimer les membres d'√©quipe o√π cet utilisateur est propri√©taire
    const { error: teamMembersError } = await supabaseClient
      .from('team_members')
      .delete()
      .eq('owner_id', user_id)

    if (teamMembersError) {
      console.warn('‚ö†Ô∏è Erreur suppression √©quipe:', teamMembersError)
    } else {
      console.log('‚úÖ √âquipe supprim√©e')
    }

    // 9. Supprimer les memberships o√π cet utilisateur est membre
    const { error: membershipError } = await supabaseClient
      .from('team_members')
      .delete()
      .eq('user_id', user_id)

    if (membershipError) {
      console.warn('‚ö†Ô∏è Erreur suppression membership:', membershipError)
    } else {
      console.log('‚úÖ Membership supprim√©')
    }

    // Supprimer d'abord les r√¥les de l'utilisateur
    const { error: rolesError } = await supabaseClient
      .from('user_roles')
      .delete()
      .eq('user_id', user_id);

    if (rolesError) {
      console.warn('‚ö†Ô∏è Erreur suppression r√¥les:', rolesError);
    } else {
      console.log('‚úÖ R√¥les utilisateur supprim√©s');
    }

    // Supprimer le profil utilisateur
    const { error: profileError } = await supabaseClient
      .from('users')
      .delete()
      .eq('id', user_id);

    if (profileError) {
      console.error('‚ùå Erreur suppression profil:', profileError);
      return new Response(
        JSON.stringify({ 
          error: profileError.message,
          details: 'Failed to delete user profile'
        }),
        { status: 400, headers: corsHeaders }
      )
    }

    console.log('‚úÖ Profil utilisateur supprim√©');

    // Supprimer l'utilisateur auth (n√©cessite service role)
    try {
      const { error: authError } = await supabaseClient.auth.admin.deleteUser(user_id);
      if (authError) {
        console.error('‚ùå Erreur suppression auth user:', authError);
        return new Response(
          JSON.stringify({ 
            error: authError.message,
            details: 'Failed to delete authentication user'
          }),
          { status: 500, headers: corsHeaders }
        )
      } else {
        console.log('‚úÖ Utilisateur auth supprim√©');
      }
    } catch (authErr) {
      console.error('‚ùå Impossible de supprimer auth user:', authErr);
      return new Response(
        JSON.stringify({ 
          error: 'Failed to delete authentication user',
          details: authErr.message
        }),
        { status: 500, headers: corsHeaders }
      )
    }

    console.log('‚úÖ Utilisateur et toutes ses donn√©es supprim√©s avec succ√®s');

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'User and all associated data deleted successfully',
        user_id: user_id
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('‚ùå Erreur suppression utilisateur:', error)
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: 'Unexpected error during user deletion',
        timestamp: new Date().toISOString()
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})
